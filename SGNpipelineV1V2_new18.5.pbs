#!/bin/sh
#PBS -l nodes=1:ppn=24
#PBS -N CCZ_Meio_vsearch
#PBS -l mem=20gb
#PBS -l pmem=1gb
#PBS -l walltime=500:15:00
#PBS -o output1.o
#PBS -e errors1.e
#PBS -m abe
#PBS -M sahar.khodami@senckenberg.de
cd $PBS_O_WORKDIR                                                                       
                                                               

# SGN pipeline for analysing metabarcoding data generated by Illumina 
# Miseq V3 300PE reads. Perform initial paired-end      
# read merging, quality filtering, chimera removal and OTU
# clustering.     
# modified from https://github.com/torognes/vsearch/wiki/VSEARCH-pipeline by pmartinez@senckenberg.de
#
# create 5 subfolders
# /scripts (holding the scripts, execute from this directory)
# /input (save the illumina reads here)
# /output for hoding the output files (note that they will be overwritten if present)
# /output/blast inside the output folder for holding the output of blast and the final Taxon table
# /blastdb for holding your blast databases and own library
#
#	for cluster with local installation of vsearch uncomment and edit following line
#	export vsearch='/home/yourloginname/vsearch/bin/vsearch'
	export vsearch='/home/skhodami/bin/mothur/vsearch'
#	edit variable VSEARCH=$vsearch
	#export blastpath='/home/skhodami/blast/ncbi-blast-2.6.0+/bin/'
	
#
#	edit variable THREADS = number of threads or cores for parallel computing
#	edit variable ISIZE = expected insert size
#	edit variable IVAR = expected +- variation of insert size 
#	edit variable OTUSIM = OTU cluster similarity value
#	edit variable OTUSIM2 = OTU cluster similarity value  
     

# run in ubuntu with bash ./SGNpipepline.sh

# to log the output and errors to a file do:
#  bash ./SGNpipelineCOI.sh  >> ../output/logfile.txt 2>&1 &


#####################################
### EDIT THESE OPTIONS            ###
#####################################
# running options
	THREADS=24
	PERL=$(which perl)
	VSEARCH='/home/skhodami/bin/mothur/vsearch'
	BLASTP='/home/skhodami/blast/ncbi-blast-2.6.0+/bin/'
	BLASTDB='/home/skhodami/metabarcoding/blastdb'

# Amplicon option
	GENE=V1V2 # Fragment name
	ISIZE=400 #expected mean insert size
	IVAR=50 # expected +/- variation of ISIZE

# Contig creation options
	MINOL=25 # minimum contig overlap
	MAXDIFF=15 #maximum number of differences  in the contig

# Filtering contigs options	
	MAXEERR=0.5 # max expected errors per contig
	NAMB=0 # max N ambiguities allowed	

# Dereplication options
	MINNDEREP=2 # minimum counts of unique sequence

# options for OTU table generation
	declare -a sim=(0.97 0.90) #similarities 
	
# options for blast
	NBALIGN=15 # how many hits to keep from genebank blast
	OWNLIB=Library_Metabarcoding.fasta	# the name of your own library concatenated with genebank blast hits
	
#####################################
### DO NOT EDIT BEYOND THIS LINE  ###
#####################################

# remove old files
	date
	rm -r ../output
	mkdir ../output
	mkdir ../output/blast
	mkdir ../output/taxa
	
	echo
	echo ====================================
	echo Processing gene $GENE, insert size: $ISIZE +- $IVAR
	echo ====================================

# Enter subdirectory with files                                         

	echo
	echo Checking FASTQ format version 
	cd ../input
	$VSEARCH --threads $THREADS \
	--fastq_chars $(ls -1 *.fastq.gz | head -1)

# create file for summary statistics

	echo 'Sample; OR; NC; NFC; NDC;' > ../output/sumstats.txt

# Process samples
	echo	
	echo Processing samples ...
	echo                                                               

# check if also fastq.gz possible

	for f in *_R1_*.fastq.gz; do
	    r=$(sed -e "s/_R1_/_R2_/" <<< "$f")
	    s=$(cut -d_ -f1 <<< "$f")

	echo
	echo ====================================
	echo Processing sample $s
	echo ====================================

# number of reads in this sample (original reads OR)
	OR=$(zcat $r | grep -c "^@")
	

#Make contigs of R1 and R2


	$VSEARCH --threads $THREADS \
        --fastq_mergepairs $f \
        --reverse $r \
	--fastq_minovlen $MINOL \
        --fastq_maxdiffs $MAXDIFF \
	--fastqout ../output/$s.merged.fastq \
        --fastq_eeout

# number of contigs in this sample (NC)
	NC=$(cat ../output/$s.merged.fastq | grep -c "^@")
	
# Commands to demultiplex and remove tags and primers                       
# Add some grep here if needed                                    

	echo
	echo Calculate quality statistics

	$VSEARCH --threads $THREADS \
        --fastq_eestats ../output/$s.merged.fastq \
        --output ../output/$s.stats
	
	echo
    	echo Quality filtering

# Filter bad reads
# max expected errors 0.5
# min length of contig 370 max is 420 [check this]
# exclude reads with N (ambiguities)


	$VSEARCH --threads $THREADS \
        --fastq_filter ../output/$s.merged.fastq \
        --fastq_maxee $MAXEERR \
        --fastq_minlen $(($ISIZE-$IVAR)) \
        --fastq_maxlen $(($ISIZE+$IVAR)) \
        --fastq_maxns $NAMB \
        --fastaout ../output/$s.filtered.fasta \
        --fasta_width 0

# number of contigs after filtering in this sample (NFC)
	NFC=$(cat ../output/$s.filtered.fasta | grep -c "^>")

	echo
	echo Dereplicate at sample level and relabel with sample_n

	$VSEARCH --threads $THREADS \
        --derep_fulllength ../output/$s.filtered.fasta \
        --strand plus \
        --output ../output/$s.derep.fasta \
        --sizeout \
        --uc ../output/$s.derep.uc \
        --relabel $s. \
        --fasta_width 0

# number of dereplicated contigs in this sample (NDC)
	NDC=$(cat ../output/$s.derep.fasta | grep -c "^>")

# write data to summary statistics file

	echo $s';' $OR';' $NC';' $NFC';' $NDC >> ../output/sumstats.txt

done # close for loop



	echo Sum of unique sequences in each sample: $(cat ../output/*.derep.fasta | grep -c "^>")

# At this point there should be one fasta file for each sample                  
# It should be quality filtered and dereplicated.                               


# create file for summary statistics chimeras

	echo 'Nbefore; N98; Nafter'  > ../output/sumstatsChim.txt



	echo
	echo ====================================
	echo Processing all samples together
	echo ====================================

	echo
	echo Merge all samples

	rm -f all.derep.fasta all.nonchimeras.derep.fasta
	cat ../output/*.derep.fasta > ../output/all.$GENE.fasta

	echo
	echo Dereplicate across samples and remove singletons

	$VSEARCH --threads $THREADS \
	--derep_fulllength ../output/all.$GENE.fasta \
	--minuniquesize $MINNDEREP \
	--sizein \
	--sizeout \
	--fasta_width 0 \
	--uc  ../output/all.derep.$GENE.uc \
	--output ../output/all.derep.$GENE.fasta

	NBF=$(grep -c "^>" ../output/all.derep.$GENE.fasta)
	echo Unique non-singleton sequences: $NBF
	

# cluster at 98%
	echo
	echo Precluster at 98% before chimera detection

	$VSEARCH --threads $THREADS \
	--cluster_size ../output/all.derep.$GENE.fasta \
	--id 0.98 \
	--strand plus \
	--sizein \
	--sizeout \
	--fasta_width 0 \
	--uc ../output/all.preclustered.$GENE.uc \
	--centroids ../output/all.preclustered.$GENE.fasta

	N98=$(grep -c "^>" ../output/all.preclustered.$GENE.fasta)	
	echo Unique sequences after preclustering: $N98
	

# chimera detection
	echo
	echo De novo chimera detection

	$VSEARCH --threads $THREADS \
	--uchime_denovo ../output/all.preclustered.$GENE.fasta \
	--sizein \
	--sizeout \
	--fasta_width 0 \
	--nonchimeras ../output/all.denovo.nonchimeras.$GENE.fasta \

	NCH=$(grep -c "^>" ../output/all.denovo.nonchimeras.$GENE.fasta)
	echo Unique sequences after de novo chimera detection: $NCH



##PERL script here
# script from
# https://github.com/torognes/vsearch/wiki/VSEARCH-pipeline

	echo
	echo Extract all non-chimeric, non-singleton sequences, dereplicated

	$PERL ../scripts/map.pl ../output/all.derep.$GENE.fasta ../output/all.preclustered.$GENE.uc ../output/all.denovo.nonchimeras.$GENE.fasta > ../output/all.nonchimeras.derep.$GENE.fasta

	echo Unique non-chimeric, non-singleton sequences: $(grep -c "^>" ../output/all.nonchimeras.derep.$GENE.fasta)

	echo
	echo Extract all non-chimeric, non-singleton sequences in each sample

	$PERL ../scripts/map.pl ../output/all.$GENE.fasta ../output/all.derep.$GENE.uc ../output/all.nonchimeras.derep.$GENE.fasta > ../output/all.nonchimeras.$GENE.fasta

	echo Sum of unique non-chimeric, non-singleton sequences in each sample: $(grep -c "^>" ../output/all.nonchimeras.$GENE.fasta)


# write data to summary statistics chimera
	echo $NBF';' $N98';'  $NCH >> ../output/sumstatsChim.txt


# start here loop for OTUSIM
	for OTUSIM in "${sim[@]}"; do

# Generate OTU table
	echo
	echo Cluster at $OTUSIM and relabel with OTU_n, generate OTU table

	$VSEARCH --threads $THREADS \
	--cluster_size ../output/all.nonchimeras.$GENE.fasta \
	--id $OTUSIM \
	--strand plus \
	--sizein \
	--sizeout \
	--fasta_width 0 \
	--uc ../output/all.clustered.$GENE.$OTUSIM.uc \
	--relabel OTU_ \
	--centroids ../output/all.otus.$GENE.$OTUSIM.fasta \
	--otutabout ../output/all.otutab.$GENE.$OTUSIM.txt

	

	echo
	echo ###################################	
	echo Number of OTUs at $OTUSIM : $(grep -c "^>" ../output/all.otus.$GENE.$OTUSIM.fasta)
	echo ###################################

# Blast against Genebank, combine with own library and blast again
# Change the OTU name with Taxon name
 
	echo ###################################	
	echo query agains blastdb
	echo ###################################	
	
	
	
	
	cd ../blastdb
	$BLASTP/blastn -db $BLASTDB/nt -query ../output/all.otus.$GENE.$OTUSIM.fasta \
	-out ../output/blast/all.otus.$GENE.$OTUSIM.blast.txt \
	-num_alignments $NBALIGN  -num_threads $THREADS \
	-outfmt "6  qseqid pident length  sblastnames sscinames sacc evalue sseq"


	
	echo ###################################	
	echo deduplicating fasta from blast results
	echo ###################################	

	awk -F'\t' '{print ">"$6"|"$4"|"$5}'  \
	../output/blast/all.otus.$GENE.$OTUSIM.blast.txt \
	| sort -uk1,1  > ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.txt

	# exclude hit with low taxonomic resolution
	grep -v  'eukaryotes|uncultured\|eukaryotes|eukaryote\|animals|uncultured\|fungi|uncultured' \
	../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.txt > ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.clean.txt



	# create list of accession numbers
	sed 's/ /_/g' ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.clean.txt \
	| awk -F'[>\|]' '{print $2}' > ../output/blast/all.otus.$GENE.$OTUSIM.blast.sacc.txt	 

	
    
    # retrieve full sequences with accession numbers
	$BLASTP/blastdbcmd -db $BLASTDB/nt \
	-entry_batch ../output/blast/all.otus.$GENE.$OTUSIM.blast.sacc.txt \
	-outfmt "%s" > ../output/blast/all.otus.$GENE.$OTUSIM.blast.fullseq.txt	
	
    # concatenate both files and create fasta
	echo ###################################	
	echo create fasta_file from blast results
	echo ###################################	

	paste -d '|' ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.clean.txt ../output/blast/all.otus.$GENE.$OTUSIM.blast.fullseq.txt  \
	| sed 's/-//g;s/ /_/g'  \
	| awk -F'|' '{print $1"|"$2"|"$3"\n"$4}' \
	> ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.fasta	
	
	
	echo ###################################
	echo concatenate blast hits with own library
	echo ###################################

	cat ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.fasta $BLASTDB/$OWNLIB \
	    > $BLASTDB/finaldb.fasta

	echo ###################################
	echo making blast database ...
	echo ###################################
	
	$BLASTP/makeblastdb -in $BLASTDB/finaldb.fasta -parse_seqids -dbtype nucl

	echo ###################################
	echo quey against own blast db all.otus.$GENE.$OTUSIM.fasta ...
	echo ###################################
	
	$BLASTP/blastn -db $BLASTDB/finaldb.fasta -query \
	    ../output/all.otus.$GENE.$OTUSIM.fasta \
	    -out ../output/blast/all.otus.$GENE.$OTUSIM.final.blast.txt -num_alignments 1  \
	    -num_threads $THREADS \
	    -outfmt "10  qseqid pident qcovs evalue length sacc "

	#replace "|" ,  "," and ";" by space
	sed -i 's/|/ /g;s/,/ /g;s/;/ /g' ../output/blast/all.otus.$GENE.$OTUSIM.final.blast.txt 

### added 12.5.2018
	echo ###################################	
	echo deduplicating blast results extracting only first species name provided by blast
	echo ###################################	
	
	awk '{print $1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9}' ../output/blast/all.otus.$GENE.$OTUSIM.final.blast.txt | \
	sort -uk1,1  > ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.blast.txt

	#format as table
	column -t ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.blast.txt \
	    > ../output/blast/all.otus.$GENE.$OTUSIM.final.blast.tab.txt

	column -t ../output/all.otutab.$GENE.$OTUSIM.txt \
	    > ../output/blast/all.otutab.$GENE.$OTUSIM.tab.txt


	#rename the otu table
	awk 'NR==FNR{a[$1]=$7" "$8" "$1" "$9" "$3" "$4" "$5" "$6;next}{$1=a[$1];}1'  \
	../output/blast/all.otus.$GENE.$OTUSIM.final.blast.tab.txt \
	../output/blast/all.otutab.$GENE.$OTUSIM.tab.txt \
	> ../output/blast/Taxon_table.$GENE.$OTUSIM.txt

	sed -i 's/^ ID/accn Group OTU Species pident qcovs length/g' ../output/blast/Taxon_table.$GENE.$OTUSIM.txt

	#create fasta file with original OTU sequence and description from blast
	grep '^[AGTC]' ../output/all.otus.$GENE.$OTUSIM.fasta > ../output/blast/otuseqs.$GENE.$OTUSIM.txt

	sort -V ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.blast.txt > ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.num.blast.txt


	paste -d '\t' ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.num.blast.txt ../output/blast/otuseqs.$GENE.$OTUSIM.txt \
	| awk  '{print ">"$7"|"$8"|"$9"|"$1"|"$2"|"$3"|"$4"|"$5"|"$6"\n"$10}' \
	>  ../output/taxa/All.OTUS.blast.$GENE.$OTUSIM.fasta

	#extract by taxon
	declare -a taxa=($(awk -F '|' '{print $2}' ../output/taxa/All.OTUS.blast.$GENE.$OTUSIM.fasta | sort -uk1,1))
	
	for taxon in "${taxa[@]}"; do
	grep -A1 --no-group-separator $taxon ../output/taxa/All.OTUS.blast.$GENE.$OTUSIM.fasta \
	 > ../output/taxa/$taxon.$GENE.$OTUSIM.fasta

	done #done extract by taxon

	# clean up temporary files
	#rm ../output/blast/otuseqs.$GENE.$OTUSIM.txt
	#rm ../output/blast/all.otus.$GENE.$OTUSIM.final.blast.tab.txt 
	#rm ../output/blast/all.otus.$GENE.$OTUSIM.final.dedup.blast.txt
	#rm ../output/blast/all.otus.$GENE.$OTUSIM.blast.dedup.fasta
	#rm ../output/blast/all.otutab.$GENE.$OTUSIM.tab.txt 
	#rm ../output/blast/all.otus.$GENE.$OTUSIM.blast.sacc.txt 
	#rm ../output/blast/all.otus.$GENE.$OTUSIM.blast.fullseq.txt	


done # done OTUSIM loop


# Game over
	echo
	echo Done
	date


